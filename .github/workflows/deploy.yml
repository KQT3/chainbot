name: Push Docker image to ECR

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-image-to-ecr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2

      - name: Create env file
        run: |
          touch .env
          echo NEXT_PUBLIC_NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} >> .env
          echo NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} >> .env
          echo KEYCLOAK_ID=${{ secrets.KEYCLOAK_ID }} >> .env
          echo KEYCLOAK_SECRET=${{ secrets.KEYCLOAK_SECRET }} >> .env
          echo KEYCLOAK_ISSUER=${{ secrets.KEYCLOAK_ISSUER }} >> .env
          cat .env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          
          PREVIOUS_IMAGE=$(aws ecr describe-images --repository-name $REPOSITORY --image-ids imageTag=latest --query 'imageDetails[0].imageDigest' --output text)
          if [ -n "$PREVIOUS_IMAGE" ]; then
              aws ecr batch-delete-image --repository-name $REPOSITORY --image-ids imageDigest=$PREVIOUS_IMAGE
          fi
